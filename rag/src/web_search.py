import os
import logging
import json
from typing import Dict, List, Any, Optional
import openai
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

class WebSearch:
    """
    Class for performing web searches using OpenAI API
    """
    
    def __init__(self):
        """
        Initialize the WebSearch class with OpenAI API key
        """
        self.api_key = os.getenv("OPENAI_API_KEY")
        if not self.api_key:
            logging.warning("OPENAI_API_KEY not found in environment variables")
        else:
            openai.api_key = self.api_key
            logging.info("WebSearch initialized with OpenAI API key")
    
    def search_web(self, query: str) -> Dict[str, Any]:
        """
        Search the web for information related to the query
        
        Args:
            query: The user's question
            
        Returns:
            Dictionary containing search results and formatted answer
        """
        try:
            if not self.api_key:
                return {
                    "success": False,
                    "answer": "Kh√¥ng th·ªÉ t√¨m ki·∫øm tr√™n internet do thi·∫øu API key.",
                    "search_results": []
                }
            
            logging.info(f"Performing web search for: {query}")
            
            # Use OpenAI's API to perform a web search
            response = openai.ChatCompletion.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω t√¨m ki·∫øm th√¥ng tin tr√™n internet. H√£y t√¨m ki·∫øm th√¥ng tin li√™n quan ƒë·∫øn c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ ch√≠nh x√°c nh·∫•t. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát."},
                    {"role": "user", "content": f"T√¨m ki·∫øm th√¥ng tin v·ªÅ: {query}"}
                ],
                temperature=0.3,
                max_tokens=500
            )
            
            # Extract the search results from the OpenAI response
            search_result = response.choices[0].message.content
            
            # Format the answer in the style of B√© B∆°
            formatted_answer = self._format_answer_as_be_bo(search_result)
            
            return {
                "success": True,
                "answer": formatted_answer,
                "search_results": [search_result]
            }
            
        except Exception as e:
            logging.error(f"Error during web search: {str(e)}")
            return {
                "success": False,
                "answer": f"Em xin l·ªói, em kh√¥ng th·ªÉ t√¨m ki·∫øm th√¥ng tin l√∫c n√†y. L·ªói: {str(e)}",
                "search_results": []
            }
    
    def _format_answer_as_be_bo(self, search_result: str) -> str:
        """
        Format the search result in the style of B√© B∆°
        
        Args:
            search_result: The raw search result from OpenAI
            
        Returns:
            Formatted answer in the style of B√© B∆°
        """
        try:
            # Use OpenAI to reformat the answer in B√© B∆°'s style
            response = openai.ChatCompletion.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": """
                    B·∫°n l√† B√© B∆°, m·ªôt tr·ª£ l√Ω th√¥ng minh v√† th√¢n thi·ªán c·ªßa d·ªãch v·ª• ShipperRachGia.vn.
                    
                    H∆∞·ªõng d·∫´n c√°ch tr·∫£ l·ªùi:
                    1. QUAN TR·ªåNG NH·∫§T: Lu√¥n tr·∫£ l·ªùi ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát, kh√¥ng bao gi·ªù s·ª≠ d·ª•ng ti·∫øng Anh ho·∫∑c b·∫•t k·ª≥ ng√¥n ng·ªØ n√†o kh√°c, d√π ch·ªâ l√† m·ªôt t·ª´.
                    2. Gi·ªõi thi·ªáu b·∫£n th√¢n l√† "Em l√† B√© B∆°" khi b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán.
                    3. S·ª≠ d·ª•ng ng√¥n ng·ªØ t√≠ch c·ª±c, nhi·ªát t√¨nh v√† th·ªÉ hi·ªán s·ª± quan t√¢m ƒë·∫øn ng∆∞·ªùi d√πng.
                    4. Khi tr·∫£ l·ªùi v·ªÅ nh√† h√†ng, kh√°ch s·∫°n ho·∫∑c d·ªãch v·ª•, h√£y d·ª±a v√†o th√¥ng tin ƒë∆∞·ª£c cung c·∫•p trong ng·ªØ c·∫£nh.
                    5. N·∫øu kh√¥ng c√≥ th√¥ng tin trong ng·ªØ c·∫£nh, h√£y h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng truy c·∫≠p website https://shipperrachgia.vn/ ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.
                    6. Tr√°nh s·ª≠ d·ª•ng t·ª´ ng·ªØ ph·ª©c t·∫°p ho·∫∑c thu·∫≠t ng·ªØ chuy√™n ng√†nh khi kh√¥ng c·∫ßn thi·∫øt.
                    7. Khi ƒë·ªÅ c·∫≠p ƒë·∫øn gi√° c·∫£, h√£y lu√¥n s·ª≠ d·ª•ng ƒë∆°n v·ªã ti·ªÅn t·ªá VND.
                    8. N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ th√¥ng tin c√° nh√¢n ho·∫∑c d·ªØ li·ªáu nh·∫°y c·∫£m, l·ªãch s·ª± t·ª´ ch·ªëi v√† ƒë·ªÅ xu·∫•t h·ªç li√™n h·ªá tr·ª±c ti·∫øp v·ªõi d·ªãch v·ª• kh√°ch h√†ng.
                    9. Khi kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ th√¥ng tin, h√£y th·ª´a nh·∫≠n ƒëi·ªÅu ƒë√≥ thay v√¨ ƒë∆∞a ra th√¥ng tin kh√¥ng ch√≠nh x√°c.
                    10. K·∫øt th√∫c c√¢u tr·∫£ l·ªùi v·ªõi c·ª•m t·ª´ th√¢n thi·ªán nh∆∞ "B√© B∆° r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n!" ho·∫∑c "B·∫°n c·∫ßn B√© B∆° h·ªó tr·ª£ g√¨ th√™m kh√¥ng?".
                    11. Ngay c·∫£ khi ng∆∞·ªùi d√πng h·ªèi b·∫±ng ti·∫øng Anh, v·∫´n ph·∫£i tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
                    """},
                    {"role": "user", "content": f"ƒê√¢y l√† th√¥ng tin t√¨m ƒë∆∞·ª£c tr√™n internet: {search_result}\n\nH√£y tr·∫£ l·ªùi v·ªõi phong c√°ch c·ªßa B√© B∆°, th√¢n thi·ªán v√† d·ªÖ th∆∞∆°ng."}
                ],
                temperature=0.7,
                max_tokens=800
            )
            
            formatted_answer = response.choices[0].message.content
            return formatted_answer
            
        except Exception as e:
            logging.error(f"Error formatting answer: {str(e)}")
            return f"Xin ch√†o anh! Em l√† B√© B∆° ƒë√¢y ·∫°! ‚ù§Ô∏è\n\nEm t√¨m ƒë∆∞·ª£c th√¥ng tin sau tr√™n internet: {search_result}\n\nEm l√† B√© B∆° lu√¥n s·∫µn s√†ng ph·ª•c v·ª• anh! ü•∞"
